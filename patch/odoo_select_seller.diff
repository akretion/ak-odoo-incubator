diff --git a/addons/product/models/product.py b/addons/product/models/product.py
index 839a8c6c850..3e2a5c482dd 100644
--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -609,32 +609,37 @@ class ProductProduct(models.Model):
     def _prepare_sellers(self, params=False):
         return self.seller_ids.filtered(lambda s: s.name.active).sorted(lambda s: (s.sequence, -s.min_qty, s.price, s.id))

+    def _is_valid_seller(self, seller, partner, quantity, date, uom, valid_sellers):
+        # Set quantity in UoM of seller
+        quantity_uom_seller = quantity
+        if quantity_uom_seller and uom and uom != seller.product_uom:
+            quantity_uom_seller = uom._compute_quantity(quantity_uom_seller, seller.product_uom)
+
+        if seller.date_start and seller.date_start > date:
+            return False
+        if seller.date_end and seller.date_end < date:
+            return False
+        if partner and seller.name not in [partner, partner.parent_id]:
+            return False
+        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
+        if quantity is not None and float_compare(quantity_uom_seller, seller.min_qty, precision_digits=precision) == -1:
+            return False
+        if seller.product_id and seller.product_id != self:
+            return False
+        if valid_sellers and valid_sellers.name != seller.name:
+            return False
+        return True
+
     def _select_seller(self, partner_id=False, quantity=0.0, date=None, uom_id=False, params=False):
         self.ensure_one()
         if date is None:
             date = fields.Date.context_today(self)
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')

         res = self.env['product.supplierinfo']
         sellers = self._prepare_sellers(params)
         sellers = sellers.filtered(lambda s: not s.company_id or s.company_id.id == self.env.company.id)
         for seller in sellers:
-            # Set quantity in UoM of seller
-            quantity_uom_seller = quantity
-            if quantity_uom_seller and uom_id and uom_id != seller.product_uom:
-                quantity_uom_seller = uom_id._compute_quantity(quantity_uom_seller, seller.product_uom)
-
-            if seller.date_start and seller.date_start > date:
-                continue
-            if seller.date_end and seller.date_end < date:
-                continue
-            if partner_id and seller.name not in [partner_id, partner_id.parent_id]:
-                continue
-            if quantity is not None and float_compare(quantity_uom_seller, seller.min_qty, precision_digits=precision) == -1:
-                continue
-            if seller.product_id and seller.product_id != self:
-                continue
-            if not res or res.name == seller.name:
+            if self._is_valid_seller(seller, partner_id, quantity, date, uom_id, res):
                 res |= seller
         return res.sorted('price')[:1]
